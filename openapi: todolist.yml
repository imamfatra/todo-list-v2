openapi: '3.0.2'
info:
  title: Todos RESTful API
  version: '1.0'
servers:
  - url: http://localhost:8080
paths:
  /api/todos/{userId}: 
    get: 
      tags:
        - "Todos"
      description: Get all todos
      summary: Get all todos
      parameters:
        - name: userId
          in: path
          required: true
          description: user id todo
          schema:
            type: integer
      responses:
        200:
          description: Success get all todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        todo:
                          type: string
                        completed:
                          type: boolean
                        userId:
                          type: integer
                  total:
                    type: number

                # 30 items ...
                example:
                  todos:
                    - id: 1
                      todo: "learning java-collection"
                      completed: false
                      userId: 45
                  total: 30

  /api/todo:
    post:
      tags:
        - "Todos"
      description: Add a new todo
      summary: Add a new todo
      requestBody:
        content:
          application/json:
            schema:
             type: object
             properties:
              todo:
                type: string
              completed:
                type: boolean
              userId:
                type: integer
            example:
              todo: go to supermarket
              completed: false
              userId: 22
      responses:
        200:
          description: Success add new a todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemaTodo2"
                  
  /api/todo?userId={int}&id={int}:
    get:
      tags:
        - "Todos"
      description: Get single a todos
      summary: Get single a todos
      parameters:
        - name: userId
          in: query
          required: true
          description: user id todos
          schema:
            type: integer
        - name: id
          in: query
          required: true
          description: id todos
          schema:
            type: integer
      responses:
        200:
          description: Success get todos by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemaTodo"
  
    put:
      tags:
        - "Todos"
      description: Update status completed
      summary: Update status complated
      parameters:
        - name: userId
          in: query
          required: true
          description: user id todos
          schema:
            type: integer
        - name: id
          in: query
          required: true
          description: id todos
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                complated:
                  type: boolean
              example:
                complated: true
      responses:
        200:
          description: Success update status complated
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/schemaTodo"
        
    delete:
      tags:
        - "Todos"
      description: Delete a todo with id
      summary: Delete a todo
      parameters:
        - name: userId
          in: query
          required: true
          description: user id todos
          schema:
            type: integer
        - name: id
          in: query
          required: true
          description: id todos
          schema:
            type: integer
      responses:
        200:
          description: Success delete a todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  todo:
                    type: string
                  complated:
                    type: boolean
                  userId:
                    type: 
                      integer
                  isDelete:
                    type: boolean
                  deletedOn: 
                    type: string
                example:
                  id: 5
                  todo: explore about java oop
                  complated: false
                  userId: 3
                  isDelete: true
                  deletedOn: /* time now */
        
  /todos/random/{userId}:
    get:
      tags:
        - "Todos"
      description: Get random a todos
      summary: Get random a todos
      parameters:
        - name: userId
          in: path
          required: true
          description: user id todos
          schema:
            type: integer
      responses:
        200:
          description: Succes get random a todos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemaTodo2"
                
  /todos?userId={int}&limit={int}&offset={int}:
    get:
      tags:
        - "Todos"
      description: Get some todos 
      summary: Get some todos with filter (limit & skip)
      parameters:
        - name: userId
          in: query
          required: true
          description: user id todos
          schema:
            type: integer
        - name: limit
          in: query
          required: true
          description: number of limit
          schema:
            type: integer
        - name: offset
          in: path
          required: true
          description: number of skip
          schema:
            type: integer

      responses:
        200:
          description: Success get todos with filter
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        todo:
                          type: string
                        completed:
                          type: boolean
                        userId:
                          type: integer
                  total:
                    type: number
                  skip:
                    type: number
                  limit:
                    type: number
                # 30 items ...
                example:
                  todos:
                    - id: 6
                      todos: "meditation"
                      completed: false
                      userId: 45
                    - id: 7
                      todos: "read a book"
                      completed: false
                      userId: 45
                  total: 30
                  skip: 5
                  limit: 2
        
  /user/registrasi:
    post:
      tags:
        - "Users"
      description: Regestrasi new user
      summary: Registrasi new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success registrasi new account
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  username:
                    type: string
                  userId:
                    type: integer

  /user/login:
    post:
      tags:
        - "Users"
      description: Login in account
      summary: Login in account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success login in account
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  username:
                    type: string
                  userId:
                    type: integer
                  token:
                    type: string


components:
  schemas:
    schemaTodo:
      type: object
      properties:
        id:
          type: integer
        todo:
          type: string
        completed:
          type: boolean
        userId:
          type: integer
      example:
        id: 4
        todo: "clean the bed room"
        completed: true
        userId: 11
    
    schemaTodo2:
      type: object
      properties:
        id:
          type: integer
        todos:
          type: string
        completed:
          type: boolean
        userId:
          type: integer
      example:
        id: 14
        todos: "go to supermarket"
        completed: false
        userId: 22

